plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-kapt'
    id 'com.google.gms.google-services'
//    id 'kotlinx-serialization'
//    id ("org.jetbrains.kotlin.plugin.serialization") version("1.9.10")
}

android {
    namespace 'ru.plumsoftware.weatherforecast'
    compileSdk 34

    defaultConfig {
        applicationId "ru.plumsoftware.weatherforecastru"
        minSdk 22
        targetSdk 34
        versionCode 9
        versionName "1.0.9"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

//        Kapt
        kapt {
            arguments {arg("room.schemaLocation", "$projectDir/schemas")}
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        compose true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    lintOptions {
        // set to true to turn off analysis progress reporting by lint
        quiet true
        // if true, stop the gradle build if errors are found
        abortOnError false
        // set to true to have all release builds run lint on issues with severity=fatal
        // and abort the build (controlled by abortOnError above) if fatal issues are found
        checkReleaseBuilds false
        // if true, only report errors
        ignoreWarnings true
        // if true, emit full/absolute paths to files with errors (true by default)
        //absolutePaths true
        // if true, check all issues, including those that are off by default
        checkAllWarnings true
        // if true, treat all warnings as errors
        warningsAsErrors true
        // turn off checking the given issue id's
        disable 'TypographyFractions','TypographyQuotes'
        // turn on the given issue id's
        enable 'RtlHardcoded','RtlCompat', 'RtlEnabled'
        // check *only* the given issue id's
        check 'NewApi', 'InlinedApi'
        // if true, don't include source code lines in the error output
        noLines true
        // if true, show all locations for an error, do not truncate lists, etc.
        showAll true
        // whether lint should include full issue explanations in the text error output
        explainIssues false
        // Fallback lint configuration (default severities, etc.)
        lintConfig file("default-lint.xml")
        // if true, generate a text report of issues (false by default)
        textReport true
        // location to write the output; can be a file or 'stdout' or 'stderr'
        //textOutput 'stdout'
        textOutput file("lint-results.txt")
        // if true, generate an XML report for use by for example Jenkins
        xmlReport true
        // file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")
        // Set the severity of the given issues to fatal (which means they will be
        // checked during release builds (even if the lint target is not included)
        fatal 'NewApi', 'InlineApi'
        // Set the severity of the given issues to error
        error 'Wakelock', 'TextViewEdits'
        // Set the severity of the given issues to warning
        warning 'ResourceAsColor'
        // Set the severity of the given issues to ignore (same as disabling the check)
        ignore 'TypographyQuotes'
        // Set the severity of the given issues to informational
        informational 'StopShip'
        // Use (or create) a baseline file for issues that should not be reported
        baseline file("lint-baseline.xml")
        // Normally most lint checks are not run on test sources (except the checks
        // dedicated to looking for mistakes in unit or instrumentation tests, unless
        // ignoreTestSources is true). You can turn on normal lint checking in all
        // sources with the following flag, false by default:
        checkTestSources true
        // Like checkTestSources, but always skips analyzing tests -- meaning that it
        // also ignores checks that have explicitly asked to look at test sources, such
        // as the unused resource check.
        ignoreTestSources true
        // Normally lint will skip generated sources, but you can turn it on with this flag
        checkGeneratedSources true
        // Normally lint will analyze all dependencies along with each module; this ensures
        // that lint can correctly (for example) determine if a resource declared in a library
        // is unused; checking only the library in isolation would not be able to identify this
        // problem. However, this leads to quite a bit of extra computation; a library is
        // analyzed repeatedly, for each module that it is used in.
        checkDependencies false
        disable 'MobileAdsSdkOutdatedVersion'
    }
}

dependencies {
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation platform('androidx.compose:compose-bom:2023.03.00')
    implementation 'com.google.firebase:firebase-messaging-ktx:23.2.1'
    implementation 'com.google.firebase:firebase-analytics-ktx:21.3.0'
    androidTestImplementation platform('androidx.compose:compose-bom:2023.03.00')

    def koin_version = "3.4.2"
    def essenty_version = "1.1.0"

    def mvi_kotlin = "mvikotlin"
    def mvi_kotlin_version = "3.2.1"

    def mvi_kotlin_main = "mvikotlin-main"
    def mvi_kotlin_main_version = "3.2.1"

    def mvi_kotlin_logging = "mvikotlin-logging"
    def mvi_kotlin_logging_version = "3.2.1"

    def mvi_kotlin_extensions_coroutines = "mvikotlin-extensions-coroutines"
    def mvi_kotlin_extensions_coroutines_version = "3.2.1"

    def nav_version = "2.7.0"

    def ui_controller = "0.30.1"

    def material_icons = "1.5.0"

    def room_version = "2.6.0"
    def kapt_version = "2.5.2"

    def ktor_version = "2.3.3"
    def logback_version = "1.2.11"
    def json_serialization_version = "1.5.1"

    def ycharts_version = "2.1.0"

    def yandex_ads_version = "6.1.0"
    def mytarget_version = "5.16.2.0"

    def glance_version = "1.0.0-rc01"
    def glance_material_version = "1.0.0-rc01"

    implementation 'androidx.core:core-ktx:1.10.1'
    implementation platform('org.jetbrains.kotlin:kotlin-bom:1.8.0')
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.6.1'
    implementation 'androidx.activity:activity-compose:1.7.2'
    implementation platform('androidx.compose:compose-bom:2022.10.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2022.10.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'

//    Navigation
    implementation ("androidx.navigation:navigation-common:$nav_version")
    implementation "androidx.navigation:navigation-compose:$nav_version"

//    Koin
    implementation "io.insert-koin:koin-android:$koin_version"
    implementation "io.insert-koin:koin-core:$koin_version"

//    MVI Kotlin
    implementation "com.arkivanov.mvikotlin:$mvi_kotlin:$mvi_kotlin_version"
    implementation "com.arkivanov.mvikotlin:$mvi_kotlin_main:$mvi_kotlin_main_version"
    implementation "com.arkivanov.mvikotlin:$mvi_kotlin_extensions_coroutines:$mvi_kotlin_extensions_coroutines_version"
    implementation "com.arkivanov.mvikotlin:$mvi_kotlin_logging:$mvi_kotlin_logging_version"
    implementation "com.arkivanov.essenty:lifecycle:$essenty_version"

//    UI controller
    implementation "com.google.accompanist:accompanist-systemuicontroller:$ui_controller"

//    Material icons
    implementation "androidx.compose.material:material:$material_icons"

//    Room database
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$kapt_version"
    implementation "androidx.room:room-ktx:$room_version"

//    Ktor
    implementation("io.ktor:ktor-client-core:$ktor_version")
    implementation("io.ktor:ktor-client-android:$ktor_version")
    implementation("io.ktor:ktor-client-serialization:$ktor_version")
    implementation("io.ktor:ktor-client-logging:$ktor_version")
    implementation("io.ktor:ktor-client-cio:$ktor_version")
    implementation("ch.qos.logback:logback-classic:$logback_version")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:$json_serialization_version")

    implementation("io.ktor:ktor-client-content-negotiation:$ktor_version")
    implementation("io.ktor:ktor-serialization-kotlinx-cbor:$ktor_version")
    implementation("io.ktor:ktor-serialization-kotlinx-json:$ktor_version")

//    Gson
    implementation 'com.google.code.gson:gson:2.10'

//    РСЯ
    implementation "com.yandex.android:mobileads:$yandex_ads_version"
//    implementation "com.yandex.ads.mediation:mobileads-mytarget:$mytarget_version"

//    Glance widget
    implementation "androidx.glance:glance-appwidget:$glance_version"
    implementation "androidx.glance:glance-material3:$glance_material_version"

//    Charts
//    implementation "co.yml:ycharts:$ycharts_version"

//    Modules
    implementation project(path: ":domain")
    implementation project(path: ":data")
    implementation project(path: ":uicomponents")
}